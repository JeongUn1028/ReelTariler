{"ast":null,"code":"var _jsxFileName = \"/Users/ijeong-un/CatchMovie/MovieProject/mymovie/src/components/part/Header.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useState } from 'react';\nimport { apiKey, PLAYLISTS, VIDEOS, YOUTUBEURL } from '../../API/apis';\nimport YouTube from 'react-youtube';\nimport ids from '../../channelId/ids';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Div = styled.div`\n    width: 100%;\n    height: 500px;\n    background: white;\n    border: 1px solid red;\n`;\n_c = Div;\nconst Header = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [playlists, setPlaylists] = useState([]);\n  const [videos, setViedos] = useState([]);\n  const getVideos = async () => {\n    const plist = await (await fetch(`${YOUTUBEURL}${PLAYLISTS}?key=${apiKey}&channelId=${ids.MavelKorea}&maxResult=50&part=snippet,contentDetails`)).json().catch(e => console.log(e));\n    setPlaylists(plist);\n    setLoading(false);\n    console.log(plist.items[0].id);\n  };\n  useEffect(() => {\n    getVideos();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Div, {\n    children: /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: playlists.items[0].id,\n      opts: {\n        width: \"560\",\n        height: \"315\",\n        playerVars: {\n          autoplay: 1,\n          //자동재생 O\n          rel: 0,\n          //관련 동영상 표시하지 않음 (근데 별로 쓸모 없는듯..)\n          modestbranding: 1 // 컨트롤 바에 youtube 로고를 표시하지 않음\n        }\n      }\n      //이벤트 리스너 \n      ,\n      onEnd: e => {\n        e.target.stopVideo(0);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(Header, \"mBKjOc+pkQhA3LE6xmPPzUHD64w=\");\n_c2 = Header;\nexport default Header;\nvar _c, _c2;\n$RefreshReg$(_c, \"Div\");\n$RefreshReg$(_c2, \"Header\");","map":{"version":3,"names":["React","styled","useState","apiKey","PLAYLISTS","VIDEOS","YOUTUBEURL","YouTube","ids","useEffect","jsxDEV","_jsxDEV","Div","div","_c","Header","_s","loading","setLoading","playlists","setPlaylists","videos","setViedos","getVideos","plist","fetch","MavelKorea","json","catch","e","console","log","items","id","children","videoId","opts","width","height","playerVars","autoplay","rel","modestbranding","onEnd","target","stopVideo","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/ijeong-un/CatchMovie/MovieProject/mymovie/src/components/part/Header.js"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { useState } from 'react';\nimport { apiKey, PLAYLISTS, VIDEOS, YOUTUBEURL } from '../../API/apis';\nimport YouTube from 'react-youtube'\nimport ids from '../../channelId/ids';\nimport { useEffect } from 'react';\n\nconst Div=styled.div`\n    width: 100%;\n    height: 500px;\n    background: white;\n    border: 1px solid red;\n`\n\nconst Header = () => {\n    const [loading, setLoading] = useState(true);\n    const [playlists, setPlaylists]  = useState([]);\n    const [videos, setViedos] = useState([]);\n\n    const getVideos = async () => {\n        const plist = await (\n            await fetch (\n                `${YOUTUBEURL}${PLAYLISTS}?key=${apiKey}&channelId=${ids.MavelKorea}&maxResult=50&part=snippet,contentDetails`\n            )\n        ).json().catch(e => console.log(e))\n        setPlaylists(plist);\n        setLoading(false);\n        console.log(plist.items[0].id);\n    }\n\n    useEffect(() => {\n        getVideos();\n    },[])\n    \n    \n    return (\n        <Div>\n            <YouTube \n            videoId={playlists.items[0].id}opts={{\n                width: \"560\",\n                height: \"315\",\n                playerVars: {\n                  autoplay: 1, //자동재생 O\n                  rel: 0, //관련 동영상 표시하지 않음 (근데 별로 쓸모 없는듯..)\n                  modestbranding: 1, // 컨트롤 바에 youtube 로고를 표시하지 않음\n                },\n              }}\n              //이벤트 리스너 \n              onEnd={(e)=>{e.target.stopVideo(0);}}      \n            />\n        </Div>\n    );\n};\n\nexport default Header;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,MAAM,EAAEC,SAAS,EAAEC,MAAM,EAAEC,UAAU,QAAQ,gBAAgB;AACtE,OAAOC,OAAO,MAAM,eAAe;AACnC,OAAOC,GAAG,MAAM,qBAAqB;AACrC,SAASC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,GAAG,GAACX,MAAM,CAACY,GAAI;AACrB;AACA;AACA;AACA;AACA,CAAC;AAAAC,EAAA,GALKF,GAAG;AAOT,MAAMG,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAIlB,QAAQ,CAAC,EAAE,CAAC;EAC/C,MAAM,CAACmB,MAAM,EAAEC,SAAS,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMqB,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC1B,MAAMC,KAAK,GAAG,MAAM,CAChB,MAAMC,KAAK,CACN,GAAEnB,UAAW,GAAEF,SAAU,QAAOD,MAAO,cAAaK,GAAG,CAACkB,UAAW,2CAA0C,CACjH,EACHC,IAAI,EAAE,CAACC,KAAK,CAACC,CAAC,IAAIC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC,CAAC;IACnCT,YAAY,CAACI,KAAK,CAAC;IACnBN,UAAU,CAAC,KAAK,CAAC;IACjBY,OAAO,CAACC,GAAG,CAACP,KAAK,CAACQ,KAAK,CAAC,CAAC,CAAC,CAACC,EAAE,CAAC;EAClC,CAAC;EAEDxB,SAAS,CAAC,MAAM;IACZc,SAAS,EAAE;EACf,CAAC,EAAC,EAAE,CAAC;EAGL,oBACIZ,OAAA,CAACC,GAAG;IAAAsB,QAAA,eACAvB,OAAA,CAACJ,OAAO;MACR4B,OAAO,EAAEhB,SAAS,CAACa,KAAK,CAAC,CAAC,CAAC,CAACC,EAAG;MAAAG,IAAI,EAAE;QACjCC,KAAK,EAAE,KAAK;QACZC,MAAM,EAAE,KAAK;QACbC,UAAU,EAAE;UACVC,QAAQ,EAAE,CAAC;UAAE;UACbC,GAAG,EAAE,CAAC;UAAE;UACRC,cAAc,EAAE,CAAC,CAAE;QACrB;MACF;MACA;MAAA;MACAC,KAAK,EAAGd,CAAC,IAAG;QAACA,CAAC,CAACe,MAAM,CAACC,SAAS,CAAC,CAAC,CAAC;MAAC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACrC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACA;AAEd,CAAC;AAACjC,EAAA,CAtCID,MAAM;AAAAmC,GAAA,GAANnC,MAAM;AAwCZ,eAAeA,MAAM;AAAC,IAAAD,EAAA,EAAAoC,GAAA;AAAAC,YAAA,CAAArC,EAAA;AAAAqC,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}