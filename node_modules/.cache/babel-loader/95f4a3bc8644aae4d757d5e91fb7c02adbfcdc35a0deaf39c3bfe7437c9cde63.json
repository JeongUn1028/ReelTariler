{"ast":null,"code":"var _jsxFileName = \"/Users/ijeong-un/CatchMovie/MovieProject/mymovie/src/components/part/Header.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\nimport { apiKey, PLAYLISTS, PLAYLISTSITEMS, VIDEOS, YOUTUBEURL } from \"../../API/apis\";\nimport YouTube from \"react-youtube\";\nimport ids from \"../../channelId/ids\";\nimport { useEffect } from \"react\";\nimport { playlistItems } from \"../../API/PlaylistItems\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Div = styled.div`\n  width: 100%;\n  height: 500px;\n  background: white;\n  border: 1px solid red;\n`;\n_c = Div;\nconst Header = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [playlists, setPlaylists] = useState([]);\n  console.log(\"HEAD\");\n  const getPlaylists = async () => {\n    const plist = await (await fetch(`${YOUTUBEURL}${PLAYLISTSITEMS}&part=id,snippet`)).json();\n    setPlaylists(plist);\n    setLoading(false);\n  };\n  //필요한것 -> video 의 id\n  const getVideos = async () => {\n    const vlist = await await fetch(`${YOUTUBEURL}${VIDEOS}?key=${apiKey}&`);\n  };\n  useEffect(() => {\n    getPlaylists();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Div, {\n    children: /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: playlistItems(),\n      opts: {\n        width: \"100%\",\n        height: \"500px\",\n        playerVars: {\n          autoplay: 0,\n          //자동재생 O\n          modestbranding: 1 // 컨트롤 바에 youtube 로고를 표시하지 않음\n        }\n      }\n      //이벤트 리스너\n      ,\n      onEnd: e => {\n        e.target.stopVideo(0);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(Header, \"lvLLs+d40Bg8tZEPlbf3qGUN6RE=\");\n_c2 = Header;\nexport default Header;\nvar _c, _c2;\n$RefreshReg$(_c, \"Div\");\n$RefreshReg$(_c2, \"Header\");","map":{"version":3,"names":["React","styled","useState","apiKey","PLAYLISTS","PLAYLISTSITEMS","VIDEOS","YOUTUBEURL","YouTube","ids","useEffect","playlistItems","jsxDEV","_jsxDEV","Div","div","_c","Header","_s","loading","setLoading","playlists","setPlaylists","console","log","getPlaylists","plist","fetch","json","getVideos","vlist","children","videoId","opts","width","height","playerVars","autoplay","modestbranding","onEnd","e","target","stopVideo","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/ijeong-un/CatchMovie/MovieProject/mymovie/src/components/part/Header.js"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\nimport { apiKey, PLAYLISTS, PLAYLISTSITEMS, VIDEOS, YOUTUBEURL } from \"../../API/apis\";\nimport YouTube from \"react-youtube\";\nimport ids from \"../../channelId/ids\";\nimport { useEffect } from \"react\";\nimport { playlistItems } from \"../../API/PlaylistItems\";\n\nconst Div = styled.div`\n  width: 100%;\n  height: 500px;\n  background: white;\n  border: 1px solid red;\n`;\n\nconst Header = () => {\n  const [loading, setLoading] = useState(true);\n  const [playlists, setPlaylists] = useState([]);\n  console.log(\"HEAD\");\n  const getPlaylists = async () => {\n    const plist = await (\n      await fetch(\n        `${YOUTUBEURL}${PLAYLISTSITEMS}&part=id,snippet`\n      )\n    ).json();\n    setPlaylists(plist);\n    setLoading(false);\n  };\n//필요한것 -> video 의 id\n  const getVideos = async () => {\n    const vlist = await (\n        await fetch(\n            `${YOUTUBEURL}${VIDEOS}?key=${apiKey}&`\n        )\n    )\n  }\n\n  useEffect(() => {\n    getPlaylists();\n  }, []);\n\n  return (\n    <Div>\n      <YouTube\n        videoId={playlistItems()}\n        opts={{\n          width: \"100%\",\n          height: \"500px\",\n          playerVars: {\n            autoplay: 0, //자동재생 O\n            modestbranding: 1, // 컨트롤 바에 youtube 로고를 표시하지 않음\n          },\n        }}\n        //이벤트 리스너\n        onEnd={(e) => {\n          e.target.stopVideo(0);\n        }}\n      />\n    </Div>\n  );\n};\n\nexport default Header;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,MAAM,EAAEC,SAAS,EAAEC,cAAc,EAAEC,MAAM,EAAEC,UAAU,QAAQ,gBAAgB;AACtF,OAAOC,OAAO,MAAM,eAAe;AACnC,OAAOC,GAAG,MAAM,qBAAqB;AACrC,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,aAAa,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,GAAG,GAAGb,MAAM,CAACc,GAAI;AACvB;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GALIF,GAAG;AAOT,MAAMG,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC9CqB,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;EACnB,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,KAAK,GAAG,MAAM,CAClB,MAAMC,KAAK,CACR,GAAEpB,UAAW,GAAEF,cAAe,kBAAiB,CACjD,EACDuB,IAAI,EAAE;IACRN,YAAY,CAACI,KAAK,CAAC;IACnBN,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EACH;EACE,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,MAAMC,KAAK,GAAG,MACV,MAAMH,KAAK,CACN,GAAEpB,UAAW,GAAED,MAAO,QAAOH,MAAO,GAAE,CAE9C;EACH,CAAC;EAEDO,SAAS,CAAC,MAAM;IACde,YAAY,EAAE;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEZ,OAAA,CAACC,GAAG;IAAAiB,QAAA,eACFlB,OAAA,CAACL,OAAO;MACNwB,OAAO,EAAErB,aAAa,EAAG;MACzBsB,IAAI,EAAE;QACJC,KAAK,EAAE,MAAM;QACbC,MAAM,EAAE,OAAO;QACfC,UAAU,EAAE;UACVC,QAAQ,EAAE,CAAC;UAAE;UACbC,cAAc,EAAE,CAAC,CAAE;QACrB;MACF;MACA;MAAA;MACAC,KAAK,EAAGC,CAAC,IAAK;QACZA,CAAC,CAACC,MAAM,CAACC,SAAS,CAAC,CAAC,CAAC;MACvB;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAEV,CAAC;AAAC5B,EAAA,CA7CID,MAAM;AAAA8B,GAAA,GAAN9B,MAAM;AA+CZ,eAAeA,MAAM;AAAC,IAAAD,EAAA,EAAA+B,GAAA;AAAAC,YAAA,CAAAhC,EAAA;AAAAgC,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}